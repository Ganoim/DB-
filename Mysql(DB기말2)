--3.1.변형 모든 도서의 이름과 가격을 검색하시오 146p.
SELECT price, book_name
FROM newbook;

--3.2. 모든 도서의 도서번호, 도서이름, 출판사, 가격을 검색하시오.
SELECT * 
FROM newbook;

--3.3 도서 테이블에 있는 모든 출판사를 검색하시오.
SELECT DISTINCT publisher 
FROM newbook;

--3.4. 가격이 20,000원 미만인 도서를 검색하세요.
SELECT * 
FROM newbook 
WHERE price < 20000;

--3.5. 가격이 20,000원 이하이고 10,000원 이상인 도서를 검색하세요.
SELECT * 
FROM newbook 
WHERE price >= 10000 AND price <= 20000;

--3.6. 출판사가 '굿스포츠' 혹은 '대한미디어'인 도서를 검색하시오.
SELECT * 
FROM newbook 
WHERE publisher IN ('굿스포츠', '대한미디어');

--3.8. 도서이름에 '축구'가 포함된 출판사를 검색하시오.
SELECT book_name, publisher 
FROM newbook 
WHERE book_name LIKE '%축구%';

--3.10. 축구에 관한 도서 중 가격이 20,000원인 도서를 검색하시오.
SELECT * 
FROM newbook 
WHERE price >= 20000 AND book_name LIKE '%축구%';

--3.13. 도서를 가격순으로 검색하고, 가격이 같으면 이름순으로 검색하시오.
SELECT * 
FROM newbook 
ORDER BY price, book_name;

--3.15 고객이 주문한 도서의 총판매액을 구하시오.
SELECT SUM(saleprice) 
FROM orders;

--3.17. 고객이 주문한 도서의 총판매액, 평균값, 최저가, 최고가를 구하시오.
SELECT SUM(saleprice), AVG(saleprice), MIN(saleprice), MAX(saleprice) 
FROM orders;

--3.19.고객별로 주문한 도서의 총수량과 총판매액을 구하시오.
SELECT customer_id, COUNT(*) AS 도서수량, SUM(saleprice) AS 총판매액
FROM orders 
GROUP BY customer_id; 

--3.20. 가격이 8000원 이상인 도서를 구매한 고객에 대하여, 고객별 주문 도서의 총 수량을 구하시오.
-- 단 두 권 이상 구매한 고객만 구한다.
SELECT customer_id, COUNT(*) AS 도서수량
FROM orders 
WHERE saleprice >= 8000 
GROUP BY customer_id 
HAVING COUNT(*) >= 2;

--3.21.고객과 고객의 주문에 관한 데이터를 모두 보이시오.
SELECT * 
FROM customer cs, orders od
WHERE cs.customer_id = od.customer_id;

--3.22.고객과 고객의 주문에 관한 데이터를 모두 보이시오.
-- 단,데이터를 고객번호 순으로 정렬하세요.
SELECT * 
FROM customer, orders 
WHERE customer.customer_id = orders.customer_id
ORDER BY customer.custid;

--3.23. 고객의 이름과 고객이 주문한 도서의 판매가격을 검색하세요.
SELECT customer.name, orders.saleprice 
FROM customer, orders
WHERE customer.customer_id = Orders.customer_id

--3.24.고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객별로 정렬하세요.
SELECT customer.name, SUM(orders.saleprice) 
FROM orders, customer 
WHERE customer.customer_id = orders.customer_id
GROUP BY customer.name
ORDER BY customer.name;

--3.25. 고객의 이름과 고객이 주문한 도서의 이름을 구하세요.
SELECT customer.name, newbook.book_name 
FROM customer, orders, newbook
WHERE customer.customer_id = orders.customer_id
AND orders.bookid = newbook.book_id;

--3.26. 가격이 20000원인 도서를 주문한 고객의 이름과 도서의 이름을 구하시오.
SELECT cs.name, bk.book_name 
FROM customer cs, orders od, newbook bk
WHERE cs.customer_id = od.customer_id
AND od.book_id = bk.book_id
AND bk.price = 20000
;

--3.27.도서를 구매하지 않은 고객을 포함하여 
--고객의 이름과 고객이 주문한 도서의 판매가격을 구하시오.
--외부 조인 Customer 기준...
SELECT customer.name, orders.saleprice 
FROM customer LEFT OUTER JOIN orders
    ON customer.customer_id = orders.customer_id;

--3.28. 가장 비싼 도서의 이름을 보시이오.	
SELECT book_name 
FROM newbook 
WHERE price = (SELECT MAX(price) FROM newbook);

--3.30 '대한미디어'에서 출판한 도서를 구매한 고객의 이름을 보이시오.
SELECT name 
FROM customer 
WHERE customer_id IN (SELECT customer_id 
                 FROM orders
                 WHERE book_id IN (SELECT book_id 
                                  FROM newbook 
                                  WHERE publisher = '대한미디어'));
                                  
/* 질의 4-21 Orders 테이블에 고객이름과 도서이름을 바로 확인할 수 있는 뷰를 생성한 후, 
‘김연아’ 고객이 구입한 도서의 주문번호, 도서이름, 주문액을 보이시오 */
CREATE VIEW vw_orders(order_id, customer_id, name, book_id, book_name, saleprice, orderdate)
AS SELECT orders.order_id, orders.customer_id, customer.name,
          orders.book_id, newbook.book_name, orders.saleperice, orders.orderdate
from orders od, customer cs, newbook bk
where od.customer_id = cs.customer_id and od.book_id = bk.book_id;

select order_id, book_name, salepice
from vw_orders
where name = '김연아';
